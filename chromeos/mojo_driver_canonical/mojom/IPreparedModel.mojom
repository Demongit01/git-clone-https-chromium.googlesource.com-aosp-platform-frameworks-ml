// Copyright 2022 The ChromiumOS Authors.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This is a Mojo representation of the NNAPI HAL CANONICAL API
// (https://chromium.googlesource.com/aosp/platform/frameworks/ml/+/refs/heads/main/common/types/include/nnapi/)

module chromeos.nnapi.canonical.mojom;

import "aosp/frameworks/ml/chromeos/mojo_driver_canonical/mojom/IBurst.mojom";
import "aosp/frameworks/ml/chromeos/mojo_driver_canonical/mojom/IExecution.mojom";
import "aosp/frameworks/ml/chromeos/mojo_driver_canonical/mojom/Types.mojom";

interface IPreparedModel {
  [Sync] execute(
          Request request, MeasureTiming measure, TimePoint? deadline,
          Duration? loopTimeoutDuration,
          array<TokenValuePair> hints,
          array<ExtensionNameAndPrefix> extensionNameToPrefix)
          => (ExecutionError executionError, array<OutputShape> outputShape, Timing timing);

  [Sync] executeFenced(
          Request request, array<SyncFence> waitFor, MeasureTiming measure,
          TimePoint? deadline, Duration? loopTimeoutDuration, Duration? timeoutDurationAfterFence,
          array<TokenValuePair> hints,
          array<ExtensionNameAndPrefix> extensionNameToPrefix)
          => (GeneralError status, SyncFence? syncFence, pending_remote<IExecuteFencedInfoCallback> executionCallback);

  [Sync] createReusableExecution(
          Request request, MeasureTiming measure, Duration? loopTimeoutDuration,
          array<TokenValuePair> hints,
          array<ExtensionNameAndPrefix> extensionNameToPrefix)
          => (GeneralError status, pending_remote<IExecution> execution);

  [Sync] configureExecutionBurst() => (GeneralError status, pending_remote<IBurst> burst);
};
