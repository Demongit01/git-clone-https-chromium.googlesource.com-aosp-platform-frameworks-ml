# Copyright 2020 The Chromium OS Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//common-mk/pkg_config.gni")

group("all") {
  deps = [
    ":libneuralnetworks",
  ]
  if (use.test) {
    deps += [
      ":chromeos_testrunner",
      ":common_testrunner",
      ":runtime_testrunner",
      ":runtime_generated_testrunner",
    ]
  }
}

shared_library("libneuralnetworks") {
  configs += [
    ":target_defaults",
  ]
  cflags_cc = [
    # libchrome/base/stl_util.h:95:33: error: unused parameter 'array'
    "-Wno-unused-parameter",
  ]
  deps = [
    ":nn-common",
    ":runtime",
    ":vendor-nn-hal",
  ]
  sources = [
    "chromeos/startup.cpp",
    "chromeos/logger.cpp",
  ]
  libs = [
    "pthread",
  ]
}

pkg_config("target_defaults") {
  cflags = [
    "-Wall",
    "-Werror",
    "-Wextra",
  ]
  cflags_cc = [
    "-std=c++17",
    # All of the HIDL generated interfaces are missing override directives.
    "-Wno-inconsistent-missing-override",
    # gemmlowp library has many signed with unsigned compares.
    "-Wno-sign-compare",
  ]
  ldflags = [
    "-Wl,--no-as-needed",
    "-Wl,--no-undefined",
  ]
  include_dirs = [ "${sysroot}/usr/include/aosp" ]
  defines = [
    "__ANDROID_API__=30",  # Android R
    "__ANDROID_API_O_MR1__=27",
    "__ANDROID_API_P__=28",
    "__ANDROID_API_Q__=29",
    "__ANDROID_API_R__=30",
    "__ANDROID_API_S__=31",
    "__ANDROID_API_FUTURE__=10000",
    "NNAPI_CHROMEOS",
  ]
  if (use.test) {
    defines += [ "NN_DEBUGGABLE" ]
  }
  pkg_deps = [
    "libnnapi-support",
    "openssl",
    "libbrillo",
    "libchrome",
    "libsession_manager-client",
  ]
}

pkg_config("common_defaults") {
  configs = [
    ":target_defaults",
  ]
  include_dirs = [
    "chromeos/includes",
    "common",
    "common/include",
    "common/include/nnapi",
    "common/random",
    "shim_and_sl/public/",
    "${sysroot}/usr/include/tensorflow",
    "${sysroot}/usr/include/tensorflow/nnapi/include",
    "${sysroot}/usr/include/tensorflow/nnapi/include/external/gemmlowp",
    "//aosp/hardware/interfaces/neuralnetworks/1.0/utils/include/",
    "//aosp/hardware/interfaces/neuralnetworks/1.1/utils/include/",
    "//aosp/hardware/interfaces/neuralnetworks/1.2/utils/include/",
    "//aosp/hardware/interfaces/neuralnetworks/1.3/utils/include/",
    "//aosp/hardware/interfaces/neuralnetworks/utils/common/include/"
  ]
  defines = [
    "NN_INCLUDE_CPU_IMPLEMENTATION",
    "TF_LITE_DISABLE_X86_NEON",
  ]
  pkg_deps = [ "libnnapi-support" ]
}

# Tests cannot be build with the NDEBUG flag set,
# but we want to allow NDEBUG for the main lib.
# Specifically, forcing NDEBUG to be always off
# will cause issues in libchrome:
# b/174605330#comment13
# Using pkg_config forces the cflags to be put at
# the end of the options string, which will allow it
# to unset the NDEBUG flag setup by the global
# cros-debug eclass. Just setting this in the
# cflags of the executable() will put this before
# the flags set by the ebuild, which will have no
# effect.
# See b/186996014 for the history on this issue.
pkg_config("disable_ndebug") {
  cflags_cc = [
    "-UNDEBUG",
  ]
  pkg_deps = [ "libnnapi-support" ]
}

static_library("runtime") {
  configs += [
    ":common_defaults",
    ":target_defaults",
    "//common-mk:pic",
    "//common-mk:visibility_default",
  ]
  cflags_cc = [
    # Stubbed out functions have unused parameters
    "-Wno-unused-parameter",
    "-Wno-unused-function",
  ]
  libs = [
    "dl",
  ]
  include_dirs = [
    "common/include",
    "driver/sample",
    "runtime",
    "runtime/include",
  ]
  sources = [
    "chromeos/compilation_caching.cpp",
    "chromeos/daemon_store.cpp",
    "chromeos/driver_loader.cpp",
    "runtime/BurstBuilder.cpp",
    "runtime/CompilationBuilder.cpp",
    "runtime/ExecutionBuilder.cpp",
    "runtime/ExecutionCallback.cpp",
    "runtime/ExecutionPlan.cpp",
    "runtime/Manager.cpp",
    "runtime/Memory.cpp",
    "runtime/ModelArgumentInfo.cpp",
    "runtime/ModelBuilder.cpp",
    "runtime/NeuralNetworks.cpp",
    "runtime/TypeManager.cpp",
  ]
}

shared_library("nn-common") {
  configs += [
    ":common_defaults",
    "//common-mk:visibility_default",
  ]
  cflags_cc = [
    # Many functions ignore some parameters
    "-Wno-unused-local-typedef",
    "-Wno-unused-parameter",
    "-Wno-unused-variable",
    "-Wno-deprecated-copy",
    "-Wno-unreachable-code-return",
  ]
  deps = [
    ":utils_1_0",
    ":utils_1_1",
    ":utils_1_2",
    ":utils_1_3",
  ]
  include_dirs = [
    "driver/cache/BlobCache",
    "driver/cache/nNCache",
    "runtime/include",
    "${sysroot}/usr/include/libtextclassifier",
  ]
  libs = [
    "dl",
    "pthread",
    "rt",
    "tensorflowlite",
    "textclassifier",  # For Farmhash.
  ]
  sources = [
    "common/BufferTracker.cpp",
    "common/CpuExecutor.cpp",
    "common/ExecutionBurstController.cpp",
    "common/ExecutionBurstServer.cpp",
    "common/GraphDump.cpp",
    "common/HalBufferTracker.cpp",
    "common/IndexedShapeWrapper.cpp",
    "common/LegacyHalUtils.cpp",
    "common/LegacyUtils.cpp",
    "common/MemoryUtils.cpp",
    "common/MetaModel.cpp",
    "common/OperationResolver.cpp",
    "common/OperationsUtils.cpp",
    "common/QuantUtils.cpp",
    "common/SharedMemoryAndroid.cpp",
    "common/TokenHasher.cpp",
    "common/TypeUtils.cpp",
    "common/Types.cpp",
    "common/ValidateHal.cpp",
    "common/Validation.cpp",
    "common/operations/Activation.cpp",
    "common/operations/ArgMinMax.cpp",
    "common/operations/BidirectionalSequenceLSTM.cpp",
    "common/operations/BidirectionalSequenceRNN.cpp",
    "common/operations/Broadcast.cpp",
    "common/operations/Cast.cpp",
    "common/operations/ChannelShuffle.cpp",
    "common/operations/Comparisons.cpp",
    "common/operations/Concatenation.cpp",
    "common/operations/Conv2D.cpp",
    "common/operations/DepthwiseConv2D.cpp",
    "common/operations/Dequantize.cpp",
    "common/operations/Elementwise.cpp",
    "common/operations/Elu.cpp",
    "common/operations/EmbeddingLookup.cpp",
    "common/operations/ExpandDims.cpp",
    "common/operations/Fill.cpp",
    "common/operations/FullyConnected.cpp",
    "common/operations/Gather.cpp",
    "common/operations/GenerateProposals.cpp",
    "common/operations/GroupedConv2D.cpp",
    "common/operations/HashtableLookup.cpp",
    "common/operations/HeatmapMaxKeypoint.cpp",
    "common/operations/InstanceNormalization.cpp",
    "common/operations/L2Normalization.cpp",
    "common/operations/LocalResponseNormalization.cpp",
    "common/operations/LogicalAndOr.cpp",
    "common/operations/LogicalNot.cpp",
    "common/operations/LogSoftmax.cpp",
    "common/operations/LSHProjection.cpp",
    "common/operations/LSTM.cpp",
    "common/operations/MaximumMinimum.cpp",
    "common/operations/Multinomial.cpp",
    "common/operations/Neg.cpp",
    "common/operations/Pooling.cpp",
    "common/operations/Pow.cpp",
    "common/operations/PRelu.cpp",
    "common/operations/QLSTM.cpp",
    "common/operations/Quantize.cpp",
    "common/operations/QuantizedLSTM.cpp",
    "common/operations/Rank.cpp",
    "common/operations/Reduce.cpp",
    "common/operations/Reshape.cpp",
    "common/operations/ResizeImageOps.cpp",
    "common/operations/RNN.cpp",
    "common/operations/RoiAlign.cpp",
    "common/operations/RoiPooling.cpp",
    "common/operations/Select.cpp",
    "common/operations/SimpleMath.cpp",
    "common/operations/Slice.cpp",
    "common/operations/Softmax.cpp",
    "common/operations/Split.cpp",
    "common/operations/Squeeze.cpp",
    "common/operations/StridedSlice.cpp",
    "common/operations/SVDF.cpp",
    "common/operations/Tile.cpp",
    "common/operations/TopK_V2.cpp",
    "common/operations/TransposeConv2D.cpp",
    "common/operations/Transpose.cpp",
    "common/operations/UnidirectionalSequenceLSTM.cpp",
    "common/operations/UnidirectionalSequenceRNN.cpp",
    "common/random/guarded_philox_random.cc",
    "common/random/random.cc",
    "common/random/simple_philox.cc",
    "driver/cache/BlobCache/BlobCache.cpp",
    "driver/cache/nnCache/nnCache.cpp",
  ]
}

static_library("utils_common") {
  configs += [
    ":common_defaults",
    "//common-mk:pic",
    "//common-mk:visibility_default",
  ]
  cflags_cc = [
    "-Wno-unused-function"
  ]
  include_dirs = [
    "//aosp/hardware/interfaces/neuralnetworks/utils/common/include/nnapi/hal",
  ]
  sources = [
    "common/SharedMemory.cpp",
    "//aosp/hardware/interfaces/neuralnetworks/utils/common/src/CommonUtils.cpp",
    "//aosp/hardware/interfaces/neuralnetworks/utils/common/src/InvalidBuffer.cpp",
    "//aosp/hardware/interfaces/neuralnetworks/utils/common/src/InvalidBurst.cpp",
    "//aosp/hardware/interfaces/neuralnetworks/utils/common/src/InvalidDevice.cpp",
    "//aosp/hardware/interfaces/neuralnetworks/utils/common/src/InvalidExecution.cpp",
    "//aosp/hardware/interfaces/neuralnetworks/utils/common/src/InvalidPreparedModel.cpp",
    "//aosp/hardware/interfaces/neuralnetworks/utils/common/src/ProtectCallback.cpp",
    "//aosp/hardware/interfaces/neuralnetworks/utils/common/src/ResilientBuffer.cpp",
    "//aosp/hardware/interfaces/neuralnetworks/utils/common/src/ResilientBurst.cpp",
    "//aosp/hardware/interfaces/neuralnetworks/utils/common/src/ResilientDevice.cpp",
    "//aosp/hardware/interfaces/neuralnetworks/utils/common/src/ResilientExecution.cpp",
    "//aosp/hardware/interfaces/neuralnetworks/utils/common/src/ResilientPreparedModel.cpp",
  ]
}

static_library("utils_1_0") {
  configs += [
    ":common_defaults",
    "//common-mk:pic",
    "//common-mk:visibility_default",
  ]
  deps = [
    ":utils_common",
  ]
  include_dirs = [
    "//aosp/hardware/interfaces/neuralnetworks/1.0/utils/include/nnapi/hal/1.0",
  ]
  sources = [
    "//aosp/hardware/interfaces/neuralnetworks/1.0/utils/src/Assertions.cpp",
    "//aosp/hardware/interfaces/neuralnetworks/1.0/utils/src/Burst.cpp",
    "//aosp/hardware/interfaces/neuralnetworks/1.0/utils/src/Callbacks.cpp",
    "//aosp/hardware/interfaces/neuralnetworks/1.0/utils/src/Conversions.cpp",
    "//aosp/hardware/interfaces/neuralnetworks/1.0/utils/src/Device.cpp",
    "//aosp/hardware/interfaces/neuralnetworks/1.0/utils/src/Execution.cpp",
    "//aosp/hardware/interfaces/neuralnetworks/1.0/utils/src/PreparedModel.cpp",
  ]
}

static_library("utils_1_1") {
  configs += [
    ":common_defaults",
    "//common-mk:pic",
    "//common-mk:visibility_default",
  ]
  deps = [
    ":utils_common",
  ]
  include_dirs = [
    "//aosp/hardware/interfaces/neuralnetworks/1.1/utils/include/nnapi/hal/1.1",
  ]
  sources = [
    "//aosp/hardware/interfaces/neuralnetworks/1.1/utils/src/Assertions.cpp",
    "//aosp/hardware/interfaces/neuralnetworks/1.1/utils/src/Conversions.cpp",
    "//aosp/hardware/interfaces/neuralnetworks/1.1/utils/src/Device.cpp",
  ]
}

static_library("utils_1_2") {
  configs += [
    ":common_defaults",
    "//common-mk:pic",
    "//common-mk:visibility_default",
  ]
  deps = [
    ":utils_common",
  ]
  include_dirs = [
    "//aosp/hardware/interfaces/neuralnetworks/1.2/utils/include/nnapi/hal/1.2",
  ]
  sources = [
    "//aosp/hardware/interfaces/neuralnetworks/1.2/utils/src/Assertions.cpp",
    "//aosp/hardware/interfaces/neuralnetworks/1.2/utils/src/Callbacks.cpp",
    "//aosp/hardware/interfaces/neuralnetworks/1.2/utils/src/Conversions.cpp",
    "//aosp/hardware/interfaces/neuralnetworks/1.2/utils/src/Device.cpp",
    "//aosp/hardware/interfaces/neuralnetworks/1.2/utils/src/Execution.cpp",
    "//aosp/hardware/interfaces/neuralnetworks/1.2/utils/src/ExecutionBurstController.cpp",
    "//aosp/hardware/interfaces/neuralnetworks/1.2/utils/src/ExecutionBurstServer.cpp",
    "//aosp/hardware/interfaces/neuralnetworks/1.2/utils/src/ExecutionBurstUtils.cpp",
    "//aosp/hardware/interfaces/neuralnetworks/1.2/utils/src/PreparedModel.cpp",
  ]
}

static_library("utils_1_3") {
  configs += [
    ":common_defaults",
    "//common-mk:pic",
    "//common-mk:visibility_default",
  ]
  deps = [
    ":utils_common",
  ]
  include_dirs = [
    "//aosp/hardware/interfaces/neuralnetworks/1.3/utils/include/nnapi/hal/1.3",
  ]
  sources = [
    "//aosp/hardware/interfaces/neuralnetworks/1.3/utils/src/Assertions.cpp",
    "//aosp/hardware/interfaces/neuralnetworks/1.3/utils/src/Buffer.cpp",
    "//aosp/hardware/interfaces/neuralnetworks/1.3/utils/src/Callbacks.cpp",
    "//aosp/hardware/interfaces/neuralnetworks/1.3/utils/src/Conversions.cpp",
    "//aosp/hardware/interfaces/neuralnetworks/1.3/utils/src/Device.cpp",
    "//aosp/hardware/interfaces/neuralnetworks/1.3/utils/src/Execution.cpp",
    "//aosp/hardware/interfaces/neuralnetworks/1.3/utils/src/PreparedModel.cpp",
  ]
}

shared_library("vendor-nn-hal") {
  configs += [
    ":common_defaults",
    ":target_defaults",
    "//common-mk:visibility_default",
  ]
  cflags_cc = [
    "-Wno-unused-parameter",
  ]
  deps = [
    ":full-driver",
    ":nn-common"
  ]
  include_dirs = [
    "driver/sample",
    "runtime/include",
  ]
  libs = [
    "pthread",
    "rt",
    "tensorflowlite",
    "textclassifier",  # For Farmhash.
  ]
  sources = [
    "chromeos/sampledriver.cpp",
    "chromeos/sampledriver_util.cpp",
  ]
}

shared_library("minimal-driver") {
  configs += [
    ":common_defaults",
    "//common-mk:visibility_default",
  ]
  cflags_cc = [
    "-Wno-unused-parameter",
    "-Wno-unused-lambda-capture",
    "-Wno-unused-function"
  ]
  deps = [
    ":nn-common",
  ]
  include_dirs = [
    "driver/sample",
    "runtime/include",
  ]
  sources = [
    "driver/sample/SampleDriver.cpp",
    "driver/sample/SampleDriverMinimal.cpp",
    "driver/sample/SampleDriverPartial.cpp",
    "driver/sample/SampleDriverUtils.cpp",
  ]
  libs = [
    "pthread",
  ]
}

shared_library("full-driver") {
  configs += [
    ":common_defaults",
    "//common-mk:visibility_default",
  ]
  cflags_cc = [
    "-Wno-unused-parameter",
    "-Wno-unused-lambda-capture",
    "-Wno-unused-function"
  ]
  deps = [
    ":nn-common",
  ]
  include_dirs = [
    "driver/sample",
    "runtime/include",
  ]
  sources = [
    "driver/sample/SampleDriver.cpp",
    "driver/sample/SampleDriverFull.cpp",
    "driver/sample/SampleDriverPartial.cpp",
    "driver/sample/SampleDriverUtils.cpp",
  ]
  libs = [
    "pthread",
  ]
}

shared_library("xnn-driver") {
  configs += [
    ":common_defaults",
    "//common-mk:visibility_default",
  ]
  cflags_cc = [
    "-Wno-unused-parameter",
    "-Wno-unused-lambda-capture",
    "-Wno-unused-function"
  ]
  deps = [
    ":nn-common",
  ]
  include_dirs = [
    "driver/sample",
    "runtime/include",
    "${sysroot}/usr/include/tensorflow/xnnpack",
  ]
  sources = [
    "driver/sample/SampleDriver.cpp",
    "driver/sample/SampleDriverFloatXNNPACK.cpp",
    "driver/sample/SampleDriverPartial.cpp",
    "driver/sample/SampleDriverUtils.cpp",
  ]

  # XNNPACK Libs
  xnnpack_libs = [
    "clog",
    "cpuinfo_impl.pic",
    "pthreadpool",
    "xnnpack_for_tflite",
    "scalar_ukernels",
    "indirection",
    "memory_planner",
    "operators",
    "operator_run",
    "packing",
    "tables"
  ]

  # platform specific libs
  if (current_cpu == "arm" || current_cpu == "arm64") {
    xnnpack_libs += [
     "neon_ukernels",
     "neondot_ukernels",
     "neonfma_ukernels",
     "neonv8_ukernels",
     "asm_ukernels",
    ]
  } else if (current_cpu == "x64" || current_cpu == "x86")  {
    xnnpack_libs += [
      "avx_ukernels",
      "avx2_ukernels",
      "avx512f_ukernels",
      "fma3_ukernels",
      "sse2_ukernels",
      "ssse3_ukernels",
      "sse41_ukernels",
    ]
  }

  libs = [
    "pthread"
  ] + xnnpack_libs
}

if (use.test) {
  static_library("generated_test_harness") {
    include_dirs = [
      "tools/test_generator/test_harness/include",
    ]
    configs += [
      ":target_defaults",
      "//common-mk:test",
    ]
    sources = [
      "tools/test_generator/test_harness/TestHarness.cpp",
    ]
  }

  static_library("nn_testrunner") {
    configs += [
      "//common-mk:test",
      ":target_defaults",
    ]
    deps = []
    sources = [ "chromeos/testrunner.cpp" ]
  }

  executable("runtime_testrunner") {
    include_dirs = [
      "driver/sample",
      "runtime",
      "chromeos",
      "runtime/include",
      "tools/test_generator/test_harness/include",
    ]
    cflags_cc = [
      # TestPartitioning moving local object in return statements
      "-Wno-pessimizing-move",
      "-Wno-unused-function"
    ]
    configs += [
      ":disable_ndebug",
      ":target_defaults",
      ":common_defaults",
      "//common-mk:test",
    ]
    deps = [
      ":nn-common",
      ":generated_test_harness",
      ":nn_testrunner",
      ":runtime",
      ":full-driver",
      ":vendor-nn-hal",
      "chromeos/tests/runtime/generated:all",
    ]
    libs = [
      "rt",              # For shm_*
      "dl",
      "textclassifier",  # For Farmhash.
      "tensorflowlite",
    ]
    sources = [
      # "chromeos/tests/runtime/sampledriver_test.cc",
      "runtime/test/GeneratedTestUtils.cpp",
      "runtime/test/PreparedModelCallback.cpp",
      "runtime/test/RequireDebug.cpp",
      "runtime/test/TestAssertions.cpp",
      "runtime/test/TestCompilationCaching.cpp",
      "runtime/test/TestCompliance.cpp",
      "runtime/test/TestControlFlow.cpp",
      "runtime/test/TestExecution.cpp",
      # "runtime/test/TestExtensions.cpp",            # Not supported on ChromeOS
      "runtime/test/TestFailingDriver.cpp",
      "runtime/test/TestFree.cpp",
      "runtime/test/TestIntrospectionControl.cpp",
      "runtime/test/TestMemory.cpp",
      "runtime/test/TestMemoryDomain.cpp",
      "runtime/test/TestMemoryInternal.cpp",
      "runtime/test/TestNeuralNetworksWrapper.cpp",
      # "runtime/test/TestOpenmpSettings.cpp",        # not needed
      "runtime/test/TestOperandExtraParams.cpp",
      "runtime/test/TestPartitioning.cpp",
      "runtime/test/TestPartitioningRandom.cpp",
      "runtime/test/TestRemoveDefaultArguments.cpp",
      "runtime/test/TestTrivialModel.cpp",
      "runtime/test/TestUnknownDimensions.cpp",
      "runtime/test/TestUnspecifiedDimensions.cpp",
      "runtime/test/TestValidateModel.cpp",
      "runtime/test/TestValidateOperations.cpp",
      "runtime/test/TestValidation.cpp",
      "runtime/test/TestWrapper.cpp",
    ]
  }

  executable("runtime_xnn_testrunner") {
    include_dirs = [
      "driver/sample",
      "runtime",
      "chromeos",
      "runtime/include",
      "tools/test_generator/test_harness/include",
      "${sysroot}/usr/include/tensorflow/xnnpack",
    ]
    cflags_cc = [
      # TestPartitioning moving local object in return statements
      "-Wno-pessimizing-move",
    ]
    configs += [
      ":disable_ndebug",
      ":target_defaults",
      ":common_defaults",
      "//common-mk:test",
    ]
    deps = [
      ":generated_test_harness",
      ":nn_testrunner",
      ":runtime",
      ":full-driver",
      ":xnn-driver"
    ]
    sources = [
      "chromeos/tests/runtime/sampledriver_xnn_test.cc"
    ]
  }

  executable("runtime_generated_testrunner") {
    include_dirs = [
      "driver/sample",
      "runtime",
      "runtime/include",
      "shim_and_sl/include",
      "tools/test_generator/test_harness/include",
    ]
    configs += [
      ":target_defaults",
      ":common_defaults",
      "//common-mk:test",
    ]
    deps = [
      ":nn-common",
      ":generated_test_harness",
      ":nn_testrunner",
      ":runtime",
      ":full-driver",
      ":vendor-nn-hal",
      "chromeos/tests/runtime/generated:all",
    ]
    libs = [
      "rt",              # For shm_*
      "dl",
      "textclassifier",  # For Farmhash.
      "tensorflowlite",
    ]
    sources = [
      "chromeos/tests/runtime/generated_test_loader_V1_0.cc",
      "chromeos/tests/runtime/generated_test_loader_V1_1.cc",
      "chromeos/tests/runtime/generated_test_loader_V1_2.cc",
      "chromeos/tests/runtime/generated_test_loader_V1_3.cc",
      "chromeos/tests/runtime/generated_test_loader_V1_3_cts.cc",
      "runtime/test/GeneratedTestUtils.cpp",
      "runtime/test/TestNeuralNetworksWrapper.cpp",
      "runtime/test/TestGenerated.cpp",
    ]
  }

  executable("chromeos_testrunner") {
    include_dirs = [
      "chromeos",
      "common/random",
    ]
    configs += [
      ":common_defaults",
      "//common-mk:test",
    ]
    cflags_cc = [
      # Eigen functions have unused parameters in release builds.
      "-Wno-unused-parameter",
    ]
    deps = [
      ":nn-common",
      ":nn_testrunner",
      ":runtime",
    ]
    sources = [
      "chromeos/tests/common/daemon_store_test.cc",
      "chromeos/tests/common/includes_test.cc",
      "chromeos/tests/common/logger_enum_test.cc",
      "chromeos/tests/common/random_test.cc",
    ]
  }

  executable("common_testrunner") {
    include_dirs = [
      "driver/cache/BlobCache",
      "driver/cache/nNCache",
      "runtime/include",
    ]
    configs += [
      ":common_defaults",
      "//common-mk:test",
    ]
    deps = [
      ":nn-common",
      ":nn_testrunner",
      ":runtime",
      ":full-driver",
      ":vendor-nn-hal",
    ]
    libs = [
      "rt",
      "dl",
      "tensorflowlite",
      "textclassifier",  # For Farmhash.
    ]
    cflags_cc = [
      # UtilsTest.cpp transitively incl lite/experimental/ruy/check_macros.h:30
      "-Wno-unused-parameter",
    ]
    sources = [
      "common/LogTagTest.cpp",
      "common/LogTagTestExtra.cpp",
      "common/UtilsTest.cpp",
      "common/operations/EmbeddingLookupTest.cpp",
      "common/operations/HashtableLookupTest.cpp",
      "common/operations/LayerNormLSTMTest.cpp",
      "common/operations/LSHProjectionTest.cpp",
      "common/operations/LSTMTest.cpp",
      "common/operations/MultinomialTest.cpp",
      "common/operations/QuantizedLSTMTest.cpp",
      "common/operations/RNNTest.cpp",
      "common/operations/SVDFTest.cpp",
      "driver/cache/BlobCache/BlobCache_test.cpp",
      "driver/cache/nnCache/nnCache_test.cpp",
    ]
  }
}
