# Copyright 2020 The Chromium OS Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//common-mk/pkg_config.gni")

group("all") {
  deps = [
    ":libneuralnetworks",
    ":driver_cache",
    ":vendor-nn-hal",
  ]
  if (use.test) {
    deps += [
      ":chromeos_testrunner",
      ":common_testrunner",
      ":common_operations_testrunner",
      ":driver_cache_testrunner",
      ":runtime_testrunner",
      ":runtime_generated_testrunner",
    ]
  }
}

shared_library("libneuralnetworks") {
  configs += [
    ":target_defaults",
  ]
  deps = [
    ":common",
    ":common_random",
    ":common_operations",
    ":runtime",
    ":vendor-nn-hal",
  ]
  sources = [
    "chromeos/startup.cpp",
  ]
  libs = [
    "pthread",
    "rt",
    "tensorflowlite",
    "textclassifier",  # For Farmhash.
  ]
}

pkg_config("target_defaults") {
  cflags = [
    "-Wall",
    "-Werror",
    "-Wextra",
  ]
  cflags_cc = [
    "-std=c++17",
    # All of the HIDL generated interfaces are missing override directives.
    "-Wno-inconsistent-missing-override",
    # gemmlowp library has many signed with unsigned compares.
    "-Wno-sign-compare",
  ]
  ldflags = [
    "-Wl,--no-as-needed",
    "-Wl,--no-undefined",
  ]
  include_dirs = [ "${sysroot}/usr/include/aosp" ]
  defines = [
    "__ANDROID_API__=30",  # Android R
    "__ANDROID_API_O_MR1__=27",
    "__ANDROID_API_P__=28",
    "__ANDROID_API_Q__=29",
    "__ANDROID_API_R__=30",
    "NNAPI_CHROMEOS",
  ]
  if (use.test) {
    defines += [ "NN_DEBUGGABLE" ]
  }
  pkg_deps = [
    "libnnapi-support",
    "openssl",
  ]
}

pkg_config("common_defaults") {
  configs = [
    ":target_defaults",
  ]
  include_dirs = [
    "chromeos/includes",
    "common",
    "common/include",
    "${sysroot}/usr/include/tensorflow",
    "${sysroot}/usr/include/tensorflow/nnapi/include",
    "${sysroot}/usr/include/tensorflow/nnapi/include/external/gemmlowp",
    "common/random",
  ]
  defines = [
    "NN_INCLUDE_CPU_IMPLEMENTATION",
    "TF_LITE_DISABLE_X86_NEON",
  ]
  pkg_deps = [ "libnnapi-support" ]
}

if (use.test) {
  static_library("nn_testrunner") {
    configs += [
      "//common-mk:test",
      ":target_defaults",
    ]
    deps = []
    sources = [ "chromeos/testrunner.cpp" ]
  }
}

static_library("common_random") {
  configs += [
    ":common_defaults",
    "//common-mk:pic",
  ]
  cflags_cc = [
    # Eigen functions have unused parameters in release builds.
    "-Wno-unused-parameter",
  ]
  sources = [
    "common/random/guarded_philox_random.cc",
    "common/random/random.cc",
    "common/random/simple_philox.cc",
  ]
}

static_library("runtime") {
  configs += [
    ":target_defaults",
    "//common-mk:pic",
    "//common-mk:visibility_default",
  ]
  cflags_cc = [
    # Stubbed out functions have unused parameters
    "-Wno-unused-parameter",
  ]
  include_dirs = [
    "common/include",
    "driver/sample",
    "runtime/include",
  ]
  sources = [
    "runtime/BurstBuilder.cpp",
    "runtime/Callbacks.cpp",
    "runtime/CompilationBuilder.cpp",
    "runtime/ExecutionBuilder.cpp",
    "runtime/ExecutionPlan.cpp",
    "runtime/Manager.cpp",
    "runtime/Memory.cpp",
    "runtime/ModelArgumentInfo.cpp",
    "runtime/ModelBuilder.cpp",
    "runtime/NeuralNetworks.cpp",
    "runtime/TypeManager.cpp",
    "runtime/VersionedInterfaces.cpp",
  ]
}

if (use.test) {
  static_library("generated_test_harness") {
    include_dirs = [
      "tools/test_generator/test_harness/include",
    ]
    configs += [
      ":target_defaults",
      "//common-mk:test",
    ]
    sources = [
      "tools/test_generator/test_harness/TestHarness.cpp",
    ]
  }
  executable("runtime_testrunner") {
    include_dirs = [
      "driver/sample",
      "runtime",
      "runtime/include",
      "tools/test_generator/test_harness/include",
    ]
    configs += [
      ":target_defaults",
      ":common_defaults",
      "//common-mk:test",
    ]
    deps = [
      ":common",
      ":common_operations",
      ":generated_test_harness",
      ":nn_testrunner",
      ":runtime",
      ":sample_driver",
      "runtime/test/generated:all",
    ]
    libs = [
      "rt",              # For shm_*
      "textclassifier",  # For Farmhash.
      "tensorflowlite",
    ]
    sources = [
      "chromeos/tests/runtime/sampledriver_test.cc",
      "runtime/test/Bridge.cpp",
      "runtime/test/GeneratedTestUtils.cpp",
      "runtime/test/RequireDebug.cpp",
      "runtime/test/TestAssertions.cpp",
      "runtime/test/TestCompilationCaching.cpp",
      "runtime/test/TestCompliance.cpp",
      "runtime/test/TestControlFlow.cpp",
      "runtime/test/TestExecution.cpp",
      "runtime/test/TestExtensions.cpp",
      "runtime/test/TestFailingDriver.cpp",
      "runtime/test/TestFree.cpp",
      "runtime/test/TestIntrospectionControl.cpp",
      "runtime/test/TestMemory.cpp",
      "runtime/test/TestMemoryDomain.cpp",
      "runtime/test/TestMemoryInternal.cpp",
      "runtime/test/TestNeuralNetworksWrapper.cpp",
      # "runtime/test/TestOpenmpSettings.cpp",          # not needed?
      "runtime/test/TestOperandExtraParams.cpp",
      "runtime/test/TestPartitioning.cpp",
      "runtime/test/TestPartitioningRandom.cpp",
      "runtime/test/TestRemoveDefaultArguments.cpp",
      "runtime/test/TestTrivialModel.cpp",
      "runtime/test/TestUnknownDimensions.cpp",         # -lots- of log output
      "runtime/test/TestUnspecifiedDimensions.cpp",     # -lots- of log output
      "runtime/test/TestValidateModel.cpp",
      "runtime/test/TestValidateOperations.cpp",
      "runtime/test/TestValidation.cpp",
      "runtime/test/TestVersionedInterfaces.cpp",
      "runtime/test/TestWrapper.cpp",
    ]
  }
  executable("runtime_generated_testrunner") {
    include_dirs = [
      "driver/sample",
      "runtime",
      "runtime/include",
      "tools/test_generator/test_harness/include",
    ]
    configs += [
      ":target_defaults",
      ":common_defaults",
      "//common-mk:test",
    ]
    deps = [
      ":common",
      ":common_operations",
      ":generated_test_harness",
      ":nn_testrunner",
      ":runtime",
      ":sample_driver",
      "runtime/test/generated:all",
    ]
    libs = [
      "rt",              # For shm_*
      "textclassifier",  # For Farmhash.
      "tensorflowlite",
    ]
    sources = [
      "chromeos/tests/runtime/generated_test_loader.cc",
      "runtime/test/GeneratedTestUtils.cpp",
      "runtime/test/TestNeuralNetworksWrapper.cpp",
      "runtime/test/TestGenerated.cpp",
    ]
  }
}

static_library("common_operations") {
  configs += [
    ":common_defaults",
    "//common-mk:pic",
  ]
  deps = [
    ":common_random",
  ]
  cflags_cc = [
    # Many functions ignore some parameters
    "-Wno-unused-parameter",
    "-Wno-unused-variable",
    "-Wno-deprecated-copy",
    "-Wno-unreachable-code-return",
  ]
  include_dirs = [
    "runtime/include",
    "${sysroot}/usr/include/libtextclassifier",
  ]
  sources = [
    "common/operations/Activation.cpp",
    "common/operations/ArgMinMax.cpp",
    "common/operations/BidirectionalSequenceLSTM.cpp",
    "common/operations/BidirectionalSequenceRNN.cpp",
    "common/operations/Broadcast.cpp",
    "common/operations/Cast.cpp",
    "common/operations/ChannelShuffle.cpp",
    "common/operations/Comparisons.cpp",
    "common/operations/Concatenation.cpp",
    "common/operations/Conv2D.cpp",
    "common/operations/DepthwiseConv2D.cpp",
    "common/operations/Dequantize.cpp",
    "common/operations/Elementwise.cpp",
    "common/operations/Elu.cpp",
    "common/operations/EmbeddingLookup.cpp",
    "common/operations/ExpandDims.cpp",
    "common/operations/Fill.cpp",
    "common/operations/FullyConnected.cpp",
    "common/operations/Gather.cpp",
    "common/operations/GenerateProposals.cpp",
    "common/operations/GroupedConv2D.cpp",
    "common/operations/HashtableLookup.cpp",
    "common/operations/HeatmapMaxKeypoint.cpp",
    "common/operations/InstanceNormalization.cpp",
    "common/operations/L2Normalization.cpp",
    "common/operations/LocalResponseNormalization.cpp",
    "common/operations/LogicalAndOr.cpp",
    "common/operations/LogicalNot.cpp",
    "common/operations/LogSoftmax.cpp",
    "common/operations/LSHProjection.cpp",
    "common/operations/LSTM.cpp",
    "common/operations/MaximumMinimum.cpp",
    "common/operations/Multinomial.cpp",
    "common/operations/Neg.cpp",
    "common/operations/Pooling.cpp",
    "common/operations/Pow.cpp",
    "common/operations/PRelu.cpp",
    "common/operations/QLSTM.cpp",
    "common/operations/Quantize.cpp",
    "common/operations/QuantizedLSTM.cpp",
    "common/operations/Rank.cpp",
    "common/operations/Reduce.cpp",
    "common/operations/Reshape.cpp",
    "common/operations/ResizeImageOps.cpp",
    "common/operations/RNN.cpp",
    "common/operations/RoiAlign.cpp",
    "common/operations/RoiPooling.cpp",
    "common/operations/Select.cpp",
    "common/operations/SimpleMath.cpp",
    "common/operations/Slice.cpp",
    "common/operations/Softmax.cpp",
    "common/operations/Split.cpp",
    "common/operations/Squeeze.cpp",
    "common/operations/StridedSlice.cpp",
    "common/operations/SVDF.cpp",
    "common/operations/Tile.cpp",
    "common/operations/TopK_V2.cpp",
    "common/operations/TransposeConv2D.cpp",
    "common/operations/Transpose.cpp",
    "common/operations/UnidirectionalSequenceLSTM.cpp",
    "common/operations/UnidirectionalSequenceRNN.cpp",
  ]
}

if (use.test) {
  executable("common_operations_testrunner") {
    include_dirs = [
      "runtime/include",
    ]
    configs += [
      ":common_defaults",
    ]
    deps = [
      ":common",
      ":common_operations",
      ":nn_testrunner",
      ":runtime",
      ":sample_driver",
    ]
    libs = [
      "rt",
      "tensorflowlite",
      "textclassifier",  # For Farmhash.
    ]
    sources = [
      "common/operations/EmbeddingLookupTest.cpp",
      "common/operations/HashtableLookupTest.cpp",
      "common/operations/LayerNormLSTMTest.cpp",
      "common/operations/LSHProjectionTest.cpp",
      "common/operations/LSTMTest.cpp",
      "common/operations/MultinomialTest.cpp",
      "common/operations/QuantizedLSTMTest.cpp",
      "common/operations/RNNTest.cpp",
      "common/operations/SVDFTest.cpp",
    ]
  }
}

static_library("common") {
  configs += [
    ":common_defaults",
    "//common-mk:pic",
  ]
  deps = [
  ]
  cflags_cc = [
    # Utils.cpp has unused parameters
    "-Wno-unused-parameter",
  ]
  include_dirs = [
    "runtime/include",
  ]
  sources = [
    "common/BufferTracker.cpp",
    "common/CpuExecutor.cpp",
    "common/ExecutionBurstController.cpp",
    "common/ExecutionBurstServer.cpp",
    "common/GraphDump.cpp",
    "common/IndexedShapeWrapper.cpp",
    "common/MemoryUtils.cpp",
    "common/MetaModel.cpp",
    "common/OperationResolver.cpp",
    "common/OperationsUtils.cpp",
    "common/QuantUtils.cpp",
    "common/TokenHasher.cpp",
    "common/Utils.cpp",
    "common/ValidateHal.cpp",
  ]
}


if (use.test) {
  executable("common_testrunner") {
    include_dirs = [
      "runtime/include",
    ]
    configs += [
      ":common_defaults",
      "//common-mk:test",
    ]
    deps = [
      ":common",
      ":nn_testrunner",
    ]
    sources = [
      "common/LogTagTest.cpp",
      "common/LogTagTestExtra.cpp",
      "common/UtilsTest.cpp",
    ]
  }
}


if (use.test) {
  executable("chromeos_testrunner") {
    include_dirs = [
      "common/random",
    ]
    configs += [
      ":common_defaults",
      "//common-mk:test",
    ]
    deps = [
      ":common",
      ":common_random",
      ":nn_testrunner",
    ]
    sources = [
      "chromeos/tests/common/includes_test.cc",
      "chromeos/tests/common/random_test.cc",
    ]
  }
}

static_library("driver_cache") {
  configs += [
    ":target_defaults",
    "//common-mk:pic",
  ]
  include_dirs = [
    "driver/cache/BlobCache",
    "driver/cache/nnCache",
  ]
  sources = [
    "driver/cache/BlobCache/BlobCache.cpp",
    "driver/cache/nnCache/nnCache.cpp",
  ]
}

if (use.test) {
  executable("driver_cache_testrunner") {
    include_dirs = [
      "driver/cache/BlobCache",
      "driver/cache/nNCache"
    ]
    configs += [
      ":target_defaults",
      "//common-mk:test",
    ]
    deps = [
      ":driver_cache",
      ":nn_testrunner",
    ]
    sources = [
      "driver/cache/BlobCache/BlobCache_test.cpp",
      "driver/cache/nnCache/nnCache_test.cpp",
    ]
  }
}

shared_library("vendor-nn-hal") {
  configs += [
    ":target_defaults",
  ]
  deps = [
    ":sample_driver",
  ]
  libs = [
    "pthread",
    "rt",
    "tensorflowlite",
    "textclassifier",  # For Farmhash.
  ]
}

static_library("sample_driver") {
  configs += [
    ":common_defaults",
    "//common-mk:pic",
    "//common-mk:visibility_default",
  ]
  deps = [
    ":common",
    ":common_operations",
  ]
  include_dirs = [
    "driver/sample",
    "runtime/include",
  ]
  sources = [
    "chromeos/sampledriver.cpp",
    "driver/sample/SampleDriver.cpp",
    "driver/sample/SampleDriverFull.cpp",
    "driver/sample/SampleDriverPartial.cpp",
    "driver/sample/SampleDriverUtils.cpp",
  ]
}
